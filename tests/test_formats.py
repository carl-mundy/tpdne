from io import BytesIO
from base64 import b64decode
import unittest
import unittest.mock as mock

import tpdne


class TestsImageAsBytes(unittest.TestCase):

    test_img_base64 = ""

    def test_image_bytes_received_ok(self):

        bytes_img = b64decode(self.test_img_base64)

        # TODO: Mock requests.get output instead
        with mock.patch('tpdne.tpdne._request_person') as patched_request:
            patched_request.return_value.content = bytes_img

            result = tpdne.tpdne_bytes()
        
        self.assertEqual(result, bytes_img)

    def test_image_b64_received_ok(self):

        bytes_img = b64decode(self.test_img_base64)

        with mock.patch('tpdne.tpdne._request_person') as patched_request:
            patched_request.return_value.content = bytes_img

            result = tpdne.tpdne_base64()

        self.assertEqual(result, self.test_img_base64)